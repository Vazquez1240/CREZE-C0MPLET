{"ast":null,"code":"import { useDeprecated } from \"./utils/utils\";\nimport { observable, runInAction } from \"mobx\";\nimport { useState } from \"react\";\nexport function useAsObservableSource(current) {\n  if (\"production\" !== process.env.NODE_ENV) useDeprecated(\"[mobx-react-lite] 'useAsObservableSource' is deprecated, please store the values directly in an observable, for example by using 'useLocalObservable', and sync future updates using 'useEffect' when needed. See the README for examples.\");\n  // We're deliberately not using idiomatic destructuring for the hook here.\n  // Accessing the state value as an array element prevents TypeScript from generating unnecessary helpers in the resulting code.\n  // For further details, please refer to mobxjs/mobx#3842.\n  var res = useState(function () {\n    return observable(current, {}, {\n      deep: false\n    });\n  })[0];\n  runInAction(function () {\n    Object.assign(res, current);\n  });\n  return res;\n}","map":{"version":3,"names":["useDeprecated","observable","runInAction","useState","useAsObservableSource","current","process","env","NODE_ENV","res","deep","Object","assign"],"sources":["/home/martin/Escritorio/soporte-creze/frontend/creze-frontend/node_modules/mobx-react-lite/src/useAsObservableSource.ts"],"sourcesContent":["import { useDeprecated } from \"./utils/utils\"\nimport { observable, runInAction } from \"mobx\"\nimport { useState } from \"react\"\n\nexport function useAsObservableSource<TSource extends object>(current: TSource): TSource {\n    if (\"production\" !== process.env.NODE_ENV)\n        useDeprecated(\n            \"[mobx-react-lite] 'useAsObservableSource' is deprecated, please store the values directly in an observable, for example by using 'useLocalObservable', and sync future updates using 'useEffect' when needed. See the README for examples.\"\n        )\n    // We're deliberately not using idiomatic destructuring for the hook here.\n    // Accessing the state value as an array element prevents TypeScript from generating unnecessary helpers in the resulting code.\n    // For further details, please refer to mobxjs/mobx#3842.\n    const res = useState(() => observable(current, {}, { deep: false }))[0]\n    runInAction(() => {\n        Object.assign(res, current)\n    })\n    return res\n}\n"],"mappings":"AAAA,SAASA,aAAa,QAAQ,eAAe;AAC7C,SAASC,UAAU,EAAEC,WAAW,QAAQ,MAAM;AAC9C,SAASC,QAAQ,QAAQ,OAAO;AAEhC,OAAM,SAAUC,qBAAqBA,CAAyBC,OAAgB;EAC1E,IAAI,YAAY,KAAKC,OAAO,CAACC,GAAG,CAACC,QAAQ,EACrCR,aAAa,CACT,4OAA4O,CAC/O;EACL;EACA;EACA;EACA,IAAMS,GAAG,GAAGN,QAAQ,CAAC;IAAM,OAAAF,UAAU,CAACI,OAAO,EAAE,EAAE,EAAE;MAAEK,IAAI,EAAE;IAAK,CAAE,CAAC;EAAxC,CAAwC,CAAC,CAAC,CAAC,CAAC;EACvER,WAAW,CAAC;IACRS,MAAM,CAACC,MAAM,CAACH,GAAG,EAAEJ,OAAO,CAAC;EAC/B,CAAC,CAAC;EACF,OAAOI,GAAG;AACd","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}